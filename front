<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Glitchnut Cryptocurrency - Your Custom Blockchain</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .header h1 {
            font-size: 3em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .blockchain-info {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .wallet-section {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .wallet-card {
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .wallet-card h3 {
            margin-bottom: 20px;
            font-size: 1.5em;
            text-align: center;
        }

        .balance {
            font-size: 2.5em;
            font-weight: bold;
            text-align: center;
            color: #FFD700;
            margin: 20px 0;
        }

        .address {
            background: rgba(0,0,0,0.3);
            padding: 10px;
            border-radius: 8px;
            word-break: break-all;
            font-family: monospace;
            margin: 10px 0;
            font-size: 0.9em;
        }

        .btn {
            background: linear-gradient(45deg, #FFD700, #FFA500);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: transform 0.2s, box-shadow 0.2s;
            width: 100%;
            margin: 10px 0;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255,215,0,0.4);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .btn-faucet {
            background: linear-gradient(45deg, #00ff88, #00cc6a);
            color: #000;
        }

        .btn-faucet:hover {
            box-shadow: 0 5px 15px rgba(0,255,136,0.4);
        }

        .input-group {
            margin: 15px 0;
        }

        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .input-group input {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: rgba(255,255,255,0.2);
            color: white;
            font-size: 1em;
        }

        .input-group input::placeholder {
            color: rgba(255,255,255,0.7);
        }

        .mining-section {
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .mining-progress {
            width: 100%;
            height: 20px;
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            margin: 20px 0;
            overflow: hidden;
        }

        .mining-bar {
            height: 100%;
            background: linear-gradient(45deg, #00ff00, #32cd32);
            width: 0%;
            transition: width 0.3s;
            border-radius: 10px;
        }

        .status {
            padding: 20px;
            border-radius: 8px;
            margin: 10px 0;
            text-align: center;
        }

        .status.success {
            background: rgba(0,255,0,0.2);
            border: 1px solid rgba(0,255,0,0.5);
        }

        .status.error {
            background: rgba(255,0,0,0.2);
            border: 1px solid rgba(255,0,0,0.5);
        }

        .status.info {
            background: rgba(0,100,255,0.2);
            border: 1px solid rgba(0,100,255,0.5);
        }

        .hidden {
            display: none;
        }

        .loading {
            text-align: center;
            padding: 20px;
            opacity: 0.7;
        }

        /* Stats Dashboard Styles */
        .stats-dashboard {
            background: rgba(255,255,255,0.1);
            margin: 30px 0;
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .stats-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255,255,255,0.1);
            padding: 25px;
            border-radius: 12px;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
        }

        .stat-icon {
            font-size: 2.5em;
            margin-bottom: 15px;
        }

        .stat-value {
            font-size: 2.8em;
            font-weight: bold;
            color: #FFD700;
            margin-bottom: 8px;
        }

        .stat-label {
            font-size: 1.1em;
            opacity: 0.9;
            margin-bottom: 5px;
        }

        .detailed-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .stats-section {
            background: rgba(255,255,255,0.05);
            padding: 25px;
            border-radius: 12px;
            border: 1px solid rgba(255,255,255,0.1);
        }

        .stats-section h4 {
            margin-bottom: 20px;
            font-size: 1.3em;
            color: #FFD700;
            text-align: center;
        }

        .leaderboard-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            margin: 8px 0;
            background: rgba(255,255,255,0.1);
            border-radius: 8px;
            border-left: 4px solid #FFD700;
        }

        .rank {
            font-weight: bold;
            color: #FFD700;
            font-size: 1.1em;
            min-width: 30px;
        }

        .address-info {
            flex-grow: 1;
            margin: 0 15px;
        }

        .value-info {
            text-align: right;
            font-weight: bold;
        }

        .percentage {
            font-size: 0.9em;
            opacity: 0.8;
        }

        .refresh-button {
            background: linear-gradient(45deg, #00ff88, #00cc6a);
            color: #000;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            margin: 20px auto;
            display: block;
            transition: transform 0.2s;
        }

        .refresh-button:hover {
            transform: translateY(-2px);
        }

        .loading-stats {
            text-align: center;
            padding: 40px;
            font-size: 1.2em;
            opacity: 0.7;
        }

        .faucet-info {
            background: rgba(0,255,136,0.1);
            border: 1px solid rgba(0,255,136,0.3);
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            text-align: center;
        }

        @media (max-width: 768px) {
            .wallet-section {
                grid-template-columns: 1fr;
            }
            
            .detailed-stats {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .container {
                padding: 10px;
            }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🌟 Glitchnut Cryptocurrency</h1>
            <p>Your Custom Blockchain with Faucet & Mining</p>
        </div>

        <!-- Blockchain Info -->
        <div class="blockchain-info">
            <h3>🔗 Live Independent Blockchain</h3>
            <p>Glitchnut runs on its own network - completely custom blockchain built from scratch!</p>
            <p>Get free coins from the faucet, mine blocks, and send transactions!</p>
        </div>

        <!-- Wallet Section -->
        <div class="wallet-section">
            <!-- Create/Import Wallet -->
            <div class="wallet-card">
                <h3>💰 Your Wallet</h3>
                <div id="no-wallet">
                    <p>Create a wallet to get started!</p>
                    <button class="btn" onclick="createWallet()">Create New Wallet</button>
                </div>
                
                <div id="wallet-info" class="hidden">
                    <div class="balance" id="balance">0 GNC</div>
                    <div class="address" id="address">Loading...</div>
                    <button class="btn" onclick="refreshBalance()">Refresh Balance</button>
                    <button class="btn" onclick="copyAddress()">Copy Address</button>
                </div>
            </div>

            <!-- Faucet Section -->
            <div class="wallet-card">
                <h3>🚰 Free Coins Faucet</h3>
                <div class="faucet-info">
                    <p>🎁 Get 100 FREE GNC coins!</p>
                    <p>Once per day per wallet</p>
                </div>
                <button class="btn btn-faucet" onclick="claimFaucet()" id="faucet-btn">
                    🚰 Claim Free Coins
                </button>
                <div id="faucet-status" style="margin-top: 10px; text-align: center; font-size: 0.9em;">
                    Ready to claim!
                </div>
            </div>

            <!-- Send Transaction -->
            <div class="wallet-card">
                <h3>📤 Send GNC</h3>
                <div class="input-group">
                    <label>Recipient Address:</label>
                    <input type="text" id="recipient" placeholder="GNCxxxxxxxxxx...">
                </div>
                <div class="input-group">
                    <label>Amount:</label>
                    <input type="number" id="amount" placeholder="100" min="1">
                </div>
                <button class="btn" onclick="sendTransaction()">Send GNC</button>
            </div>
        </div>

        <!-- Mining Section -->
        <div class="mining-section">
            <h3>⛏️ Mine Glitchnut Coins</h3>
            <p>Mine GNC coins directly in your browser! Earn 50 GNC per block.</p>
            <div class="mining-progress">
                <div class="mining-bar" id="mining-progress"></div>
            </div>
            <div id="mining-status">Ready to mine</div>
            <button class="btn" id="mine-btn" onclick="startMining()">Start Mining</button>
        </div>

        <!-- Status Messages -->
        <div id="status-container"></div>

        <!-- Comprehensive Stats Dashboard -->
        <div class="stats-dashboard">
            <div class="stats-header">
                <h2>📊 Live Network Statistics</h2>
                <p>Real-time analytics for the Glitchnut blockchain</p>
            </div>

            <!-- Loading state -->
            <div id="stats-loading" class="loading-stats">
                <div class="pulse">🔄 Loading network statistics...</div>
            </div>

            <!-- Main stats content -->
            <div id="stats-content" class="hidden">
                <!-- Key Network Metrics -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">🪙</div>
                        <div class="stat-value" id="total-coins-detailed">0</div>
                        <div class="stat-label">Total GNC Coins</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">📊</div>
                        <div class="stat-value" id="total-transactions-detailed">0</div>
                        <div class="stat-label">Total Transactions</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">👥</div>
                        <div class="stat-value" id="total-wallets-detailed">0</div>
                        <div class="stat-label">Active Wallets</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">🧱</div>
                        <div class="stat-value" id="total-blocks-detailed">0</div>
                        <div class="stat-label">Blocks Mined</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">🚰</div>
                        <div class="stat-value" id="faucet-claims">0</div>
                        <div class="stat-label">Faucet Claims</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">🌐</div>
                        <div class="stat-value" id="network-age">0</div>
                        <div class="stat-label">Days Online</div>
                    </div>
                </div>

                <!-- Detailed Analytics -->
                <div class="detailed-stats">
                    <!-- Top Miners Leaderboard -->
                    <div class="stats-section">
                        <h4>🏆 Top Miners</h4>
                        <div id="top-miners-detailed">
                            <div class="loading">Loading miners...</div>
                        </div>
                    </div>

                    <!-- Richest Wallets -->
                    <div class="stats-section">
                        <h4>💎 Richest Wallets</h4>
                        <div id="richest-wallets-detailed">
                            <div class="loading">Loading wallets...</div>
                        </div>
                    </div>
                </div>

                <!-- Recent Transactions -->
                <div class="stats-section">
                    <h4>📋 Recent Network Activity</h4>
                    <div id="recent-transactions">
                        <div class="loading">Loading transactions...</div>
                    </div>
                </div>

                <!-- Refresh Button -->
                <button class="refresh-button" onclick="refreshDetailedStats()">
                    🔄 Refresh All Statistics
                </button>

                <!-- Last Updated -->
                <div style="text-align: center; opacity: 0.7; margin-top: 20px;">
                    Last updated: <span id="stats-last-updated">Never</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentWallet = null;
        let mining = false;
        let statsData = null;
        
        // Wallet functions
        async function createWallet() {
            try {
                showStatus('Creating new wallet...', 'info');
                const response = await fetch('/api/create-wallet', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    currentWallet = data.address;
                    localStorage.setItem('glitchnut_wallet', currentWallet);
                    updateWalletDisplay();
                    showStatus('Wallet created successfully! 🎉', 'success');
                } else {
                    showStatus('Error creating wallet: ' + data.error, 'error');
                }
            } catch (error) {
                showStatus('Error creating wallet: ' + error.message, 'error');
            }
        }
        
        async function refreshBalance() {
            if (!currentWallet) return;
            
            try {
                const response = await fetch(`/api/wallet/${currentWallet}`);
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('balance').textContent = `${data.balance.toLocaleString()} GNC`;
                } else {
                    showStatus('Error fetching balance: ' + data.error, 'error');
                }
            } catch (error) {
                showStatus('Error fetching balance: ' + error.message, 'error');
            }
        }
        
        function updateWalletDisplay() {
            if (currentWallet) {
                document.getElementById('no-wallet').classList.add('hidden');
                document.getElementById('wallet-info').classList.remove('hidden');
                document.getElementById('address').textContent = currentWallet;
                refreshBalance();
            } else {
                document.getElementById('no-wallet').classList.remove('hidden');
                document.getElementById('wallet-info').classList.add('hidden');
            }
        }
        
        function copyAddress() {
            navigator.clipboard.writeText(currentWallet);
            showStatus('Address copied to clipboard! 📋', 'success');
        }

        // Faucet function
        async function claimFaucet() {
            if (!currentWallet) {
                showStatus('Please create a wallet first!', 'error');
                return;
            }

            try {
                document.getElementById('faucet-btn').disabled = true;
                document.getElementById('faucet-status').textContent = 'Claiming free coins...';
                
                const response = await fetch('/api/faucet', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ address: currentWallet })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showStatus(data.message, 'success');
                    refreshBalance();
                    document.getElementById('faucet-status').textContent = 'Coins claimed! ✅';
                    setTimeout(loadDetailedStats, 1000);
                } else {
                    showStatus('Faucet error: ' + data.error, 'error');
                    document.getElementById('faucet-status').textContent = data.error;
                }
            } catch (error) {
                showStatus('Faucet error: ' + error.message, 'error');
                document.getElementById('faucet-status').textContent = 'Error claiming coins';
            } finally {
                document.getElementById('faucet-btn').disabled = false;
            }
        }
        
        // Mining functions
        async function startMining() {
            if (!currentWallet) {
                showStatus('Please create a wallet first!', 'error');
                return;
            }
            
            if (mining) {
                stopMining();
                return;
            }
            
            mining = true;
            document.getElementById('mine-btn').textContent = 'Stop Mining';
            document.getElementById('mining-status').textContent = 'Mining in progress...';
            
            // Simulate mining progress
            animateMiningProgress();
            
            try {
                const response = await fetch('/api/mine', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ minerAddress: currentWallet })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showStatus(`Block mined! Earned ${data.reward} GNC 🎉`, 'success');
                    refreshBalance();
                    // Refresh stats after mining
                    setTimeout(loadDetailedStats, 1000);
                } else {
                    showStatus('Mining failed: ' + data.error, 'error');
                }
            } catch (error) {
                showStatus('Mining error: ' + error.message, 'error');
            } finally {
                stopMining();
            }
        }
        
        function stopMining() {
            mining = false;
            document.getElementById('mine-btn').textContent = 'Start Mining';
            document.getElementById('mining-status').textContent = 'Ready to mine';
            document.getElementById('mining-progress').style.width = '0%';
        }
        
        function animateMiningProgress() {
            if (!mining) return;
            
            const progress = document.getElementById('mining-progress');
            let width = 0;
            const interval = setInterval(() => {
                if (!mining) {
                    clearInterval(interval);
                    return;
                }
                
                width += Math.random() * 10;
                if (width > 100) width = 100;
                progress.style.width = width + '%';
                
                if (width >= 100) {
                    clearInterval(interval);
                }
            }, 200);
        }
        
        // Transaction functions
        async function sendTransaction() {
            if (!currentWallet) {
                showStatus('Please create a wallet first!', 'error');
                return;
            }
            
            const recipient = document.getElementById('recipient').value;
            const amount = parseFloat(document.getElementById('amount').value);
            
            if (!recipient || !amount || amount <= 0) {
                showStatus('Please enter valid recipient and amount', 'error');
                return;
            }
            
            try {
                showStatus('Sending transaction...', 'info');
                const response = await fetch('/api/transaction', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        from: currentWallet,
                        to: recipient,
                        amount: amount
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showStatus('Transaction sent successfully! 🚀', 'success');
                    document.getElementById('recipient').value = '';
                    document.getElementById('amount').value = '';
                    // Refresh stats after transaction
                    setTimeout(loadDetailedStats, 1000);
                } else {
                    showStatus('Transaction failed: ' + data.error, 'error');
                }
            } catch (error) {
                showStatus('Transaction error: ' + error.message, 'error');
            }
        }

        // Stats functions
        async function loadDetailedStats() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();

                if (data.success) {
                    statsData = data.stats;
                    updateDetailedStatsDisplay();
                    document.getElementById('stats-loading').classList.add('hidden');
                    document.getElementById('stats-content').classList.remove('hidden');
                } else {
                    showStatus('Error loading stats: ' + data.error, 'error');
                }
            } catch (error) {
                showStatus('Error loading stats: ' + error.message, 'error');
                document.getElementById('stats-loading').innerHTML = 
                    '<div style="color: #ff6b6b;">❌ Error loading statistics</div>';
            }
        }

        function updateDetailedStatsDisplay() {
            if (!statsData) return;

            // Update main metrics
            document.getElementById('total-coins-detailed').textContent = statsData.totalCoins.toLocaleString();
            document.getElementById('total-transactions-detailed').textContent = statsData.totalTransactions.toLocaleString();
            document.getElementById('total-wallets-detailed').textContent = statsData.totalWallets.toLocaleString();
            document.getElementById('total-blocks-detailed').textContent = statsData.totalBlocks.toLocaleString();
            document.getElementById('faucet-claims').textContent = statsData.faucetClaims.toLocaleString();
            document.getElementById('network-age').textContent = statsData.networkAge;

            // Update top miners
            updateTopMiners();
            
            // Update richest wallets
            updateRichestWallets();

            // Update recent transactions
            updateRecentTransactions();

            // Update timestamp
            document.getElementById('stats-last-updated').textContent = new Date(statsData.lastUpdated).toLocaleTimeString();
        }

        function updateTopMiners() {
            const container = document.getElementById('top-miners-detailed');
            
            if (statsData.topMiners && statsData.topMiners.length > 0) {
                container.innerHTML = statsData.topMiners.map(miner => `
                    <div class="leaderboard-item">
                        <div class="rank">#${miner.rank}</div>
                        <div class="address-info">
                            <div>${miner.address}</div>
                            <div class="percentage">${miner.percentage}% of blocks</div>
                        </div>
                        <div class="value-info">
                            <div>${miner.blocksMinedCount} blocks</div>
                        </div>
                    </div>
                `).join('');
            } else {
                container.innerHTML = '<div class="loading">No miners yet - start mining!</div>';
            }
        }

        function updateRichestWallets() {
            const container = document.getElementById('richest-wallets-detailed');
            
            if (statsData.richestWallets && statsData.richestWallets.length > 0) {
                container.innerHTML = statsData.richestWallets.map(wallet => `
                    <div class="leaderboard-item">
                        <div class="rank">#${wallet.rank}</div>
                        <div class="address-info">
                            <div>${wallet.address}</div>
                            <div class="percentage">${wallet.percentage}% of supply</div>
                        </div>
                        <div class="value-info">
                            <div>${wallet.balance.toLocaleString()} GNC</div>
                        </div>
                    </div>
                `).join('');
            } else {
                container.innerHTML = '<div class="loading">No wallets with balance yet</div>';
            }
        }

        function updateRecentTransactions() {
            const container = document.getElementById('recent-transactions');
            
            if (statsData.recentTransactions && statsData.recentTransactions.length > 0) {
                container.innerHTML = statsData.recentTransactions.map(tx => `
                    <div style="padding: 10px; margin: 5px 0; background: rgba(255,255,255,0.1); border-radius: 5px;">
                        <strong style="color: ${tx.type === 'mining' ? '#FFD700' : tx.type === 'faucet' ? '#00ff88' : '#fff'}">${tx.type.toUpperCase()}</strong>: 
                        ${tx.from} → ${tx.to} 
                        <span style="color: #FFD700; font-weight: bold;">${tx.amount.toLocaleString()} GNC</span>
                        <div style="font-size: 0.8em; opacity: 0.7; margin-top: 5px;">
                            ${new Date(tx.timestamp).toLocaleString()}
                        </div>
                    </div>
                `).join('');
            } else {
                container.innerHTML = '<div class="loading">No transactions yet</div>';
            }
        }

        function refreshDetailedStats() {
            loadDetailedStats();
            showStatus('Statistics refreshed! 📊', 'success');
        }
        
        // Utility functions
        function showStatus(message, type) {
            const container = document.getElementById('status-container');
            const statusDiv = document.createElement('div');
            statusDiv.className = `status ${type}`;
            statusDiv.textContent = message;
            
            container.appendChild(statusDiv);
            
            // Remove after 5 seconds
            setTimeout(() => {
                if (statusDiv.parentNode) {
                    statusDiv.parentNode.removeChild(statusDiv);
                }
            }, 5000);
        }
        
        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            // Check for existing wallet
            const savedWallet = localStorage.getItem('glitchnut_wallet');
            if (savedWallet) {
                currentWallet = savedWallet;
            }
            
            updateWalletDisplay();
            
            // Load stats after a short delay
            setTimeout(loadDetailedStats, 2000);
            
            // Auto-refresh stats every 30 seconds
            setInterval(loadDetailedStats, 30000);
            
            // Show welcome message
            showStatus('🌟 Welcome to Glitchnut - Your Custom Cryptocurrency! 🌟', 'success');
        });
    </script>
</body>
</html>
